{"ast":null,"code":"import axios from \"axios\";\nimport authHeader from './auth-header';\nconst API_URL = \"http://localhost:8082/api/auth/\";\n\nclass AuthService {\n  login(username, password) {\n    return axios.post(API_URL + \"signin\", {\n      username,\n      password\n    }).then(response => {\n      if (response.data.accessToken) {\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\n      }\n\n      return response.data;\n    });\n  }\n\n  logout() {\n    localStorage.removeItem(\"user\");\n  }\n\n  register(username, email, password) {\n    return axios.post(API_URL + \"signup\", {\n      username,\n      email,\n      password\n    });\n  }\n\n  getUserById(userId) {\n    return axios.get(API_URL + userId);\n  }\n\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem('user'));\n    ;\n  }\n\n  adminUpdateUser(userId, user) {\n    return axios.put(API_URL + \"admin-update-user/\" + userId, user, {\n      headers: authHeader()\n    });\n  }\n\n  managerUpdateUser(userId, user) {\n    return axios.put(API_URL + \"manager-update-user/\" + userId, user, {\n      headers: authHeader()\n    });\n  }\n\n  userUpdateUser(userId, user) {\n    return axios.put(API_URL + \"user-update-user/\" + userId, user);\n  }\n\n  deleteUser(userId) {\n    return axios.delete(API_URL + userId, {\n      headers: authHeader()\n    });\n  }\n\n  userRequest(userId, request) {\n    return axios.put(API_URL + \"user-request-role/\" + userId, request);\n  }\n\n}\n\nexport default new AuthService();","map":{"version":3,"sources":["E:/IntelliJ/Projects/Restaurant/Vietnamese_Restaurant/frontend/src/services/auth.service.js"],"names":["axios","authHeader","API_URL","AuthService","login","username","password","post","then","response","data","accessToken","localStorage","setItem","JSON","stringify","logout","removeItem","register","email","getUserById","userId","get","getCurrentUser","parse","getItem","adminUpdateUser","user","put","headers","managerUpdateUser","userUpdateUser","deleteUser","delete","userRequest","request"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AAEA,MAAMC,OAAO,GAAG,iCAAhB;;AAEA,MAAMC,WAAN,CAAkB;AAChBC,EAAAA,KAAK,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACxB,WAAON,KAAK,CACTO,IADI,CACCL,OAAO,GAAG,QADX,EACqB;AACxBG,MAAAA,QADwB;AAExBC,MAAAA;AAFwB,KADrB,EAKJE,IALI,CAKCC,QAAQ,IAAI;AAChB,UAAIA,QAAQ,CAACC,IAAT,CAAcC,WAAlB,EAA+B;AAC7BC,QAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeN,QAAQ,CAACC,IAAxB,CAA7B;AACD;;AAED,aAAOD,QAAQ,CAACC,IAAhB;AACD,KAXI,CAAP;AAYD;;AAEDM,EAAAA,MAAM,GAAG;AACPJ,IAAAA,YAAY,CAACK,UAAb,CAAwB,MAAxB;AACD;;AAEDC,EAAAA,QAAQ,CAACb,QAAD,EAAWc,KAAX,EAAkBb,QAAlB,EAA4B;AAClC,WAAON,KAAK,CAACO,IAAN,CAAWL,OAAO,GAAG,QAArB,EAA+B;AACpCG,MAAAA,QADoC;AAEpCc,MAAAA,KAFoC;AAGpCb,MAAAA;AAHoC,KAA/B,CAAP;AAKD;;AAEDc,EAAAA,WAAW,CAACC,MAAD,EAAQ;AACjB,WAAOrB,KAAK,CAACsB,GAAN,CAAUpB,OAAO,GAAGmB,MAApB,CAAP;AACD;;AAEDE,EAAAA,cAAc,GAAG;AACf,WAAOT,IAAI,CAACU,KAAL,CAAWZ,YAAY,CAACa,OAAb,CAAqB,MAArB,CAAX,CAAP;AAAgD;AACjD;;AAEDC,EAAAA,eAAe,CAACL,MAAD,EAASM,IAAT,EAAc;AAC3B,WAAO3B,KAAK,CAAC4B,GAAN,CAAU1B,OAAO,GAAG,oBAAV,GAAiCmB,MAA3C,EAAmDM,IAAnD,EAAyD;AAAEE,MAAAA,OAAO,EAAE5B,UAAU;AAArB,KAAzD,CAAP;AACD;;AAED6B,EAAAA,iBAAiB,CAACT,MAAD,EAASM,IAAT,EAAc;AAC7B,WAAO3B,KAAK,CAAC4B,GAAN,CAAU1B,OAAO,GAAG,sBAAV,GAAmCmB,MAA7C,EAAqDM,IAArD,EAA2D;AAAEE,MAAAA,OAAO,EAAE5B,UAAU;AAArB,KAA3D,CAAP;AACD;;AAED8B,EAAAA,cAAc,CAACV,MAAD,EAASM,IAAT,EAAc;AAC1B,WAAO3B,KAAK,CAAC4B,GAAN,CAAU1B,OAAO,GAAG,mBAAV,GAAgCmB,MAA1C,EAAkDM,IAAlD,CAAP;AACD;;AAEDK,EAAAA,UAAU,CAACX,MAAD,EAAQ;AAChB,WAAOrB,KAAK,CAACiC,MAAN,CAAa/B,OAAO,GAAGmB,MAAvB,EAA+B;AAAEQ,MAAAA,OAAO,EAAE5B,UAAU;AAArB,KAA/B,CAAP;AACD;;AAEDiC,EAAAA,WAAW,CAACb,MAAD,EAASc,OAAT,EAAiB;AAC1B,WAAOnC,KAAK,CAAC4B,GAAN,CAAU1B,OAAO,GAAG,oBAAV,GAAiCmB,MAA3C,EAAmDc,OAAnD,CAAP;AACD;;AAtDe;;AA0DlB,eAAe,IAAIhC,WAAJ,EAAf","sourcesContent":["import axios from \"axios\";\r\nimport authHeader from './auth-header';\r\n\r\nconst API_URL = \"http://localhost:8082/api/auth/\";\r\n\r\nclass AuthService {\r\n  login(username, password) {\r\n    return axios\r\n      .post(API_URL + \"signin\", {\r\n        username,\r\n        password\r\n      })\r\n      .then(response => {\r\n        if (response.data.accessToken) {\r\n          localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n        }\r\n\r\n        return response.data;\r\n      });\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem(\"user\");\r\n  }\r\n\r\n  register(username, email, password) {\r\n    return axios.post(API_URL + \"signup\", {\r\n      username,\r\n      email,\r\n      password\r\n    });\r\n  }\r\n\r\n  getUserById(userId){\r\n    return axios.get(API_URL + userId)\r\n  }\r\n\r\n  getCurrentUser() {\r\n    return JSON.parse(localStorage.getItem('user'));;\r\n  }\r\n\r\n  adminUpdateUser(userId, user){\r\n    return axios.put(API_URL + \"admin-update-user/\" + userId, user, { headers: authHeader() })\r\n  }\r\n\r\n  managerUpdateUser(userId, user){\r\n    return axios.put(API_URL + \"manager-update-user/\" + userId, user, { headers: authHeader() })\r\n  }\r\n\r\n  userUpdateUser(userId, user){\r\n    return axios.put(API_URL + \"user-update-user/\" + userId, user)\r\n  }\r\n\r\n  deleteUser(userId){\r\n    return axios.delete(API_URL + userId, { headers: authHeader() });\r\n  }\r\n\r\n  userRequest(userId, request){\r\n    return axios.put(API_URL + \"user-request-role/\" + userId, request)\r\n  }\r\n  \r\n}\r\n\r\nexport default new AuthService();\r\n"]},"metadata":{},"sourceType":"module"}